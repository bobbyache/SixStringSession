// <auto-generated />
using CygSoft.SmartSession.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CygSoft.SmartSession.EF.Migrations
{
    [DbContext(typeof(SmartSessionContext))]
    [Migration("20180901102046_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Exercises.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("DifficultyRating");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OptimalDuration");

                    b.Property<int>("PracticalityRating");

                    b.Property<bool>("Scribed");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<DateTime>("TargetCompletionDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.GoalPracticeTask", b =>
                {
                    b.Property<int>("GoalId");

                    b.Property<int>("TaskId");

                    b.HasKey("GoalId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("GoalPracticeTask");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.PracticeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<int?>("ExerciseId");

                    b.Property<int>("GoalTaskType");

                    b.Property<int>("TargetPracticeDuration");

                    b.Property<int>("TargetSpeed");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.SessionPracticeTask", b =>
                {
                    b.Property<int>("SessionId");

                    b.Property<int>("PracticeTaskId");

                    b.Property<int?>("DurationId");

                    b.Property<int?>("ManualProgressEstimateId");

                    b.Property<int?>("MetronomeId");

                    b.HasKey("SessionId", "PracticeTaskId");

                    b.HasIndex("DurationId");

                    b.HasIndex("ManualProgressEstimateId");

                    b.HasIndex("MetronomeId");

                    b.HasIndex("PracticeTaskId");

                    b.ToTable("SessionPracticeTask");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.SessionPracticeTaskDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("Minutes");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("SessionPracticeTaskDuration");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.SessionPracticeTaskManualProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Progress");

                    b.HasKey("Id");

                    b.ToTable("SessionPracticeTaskManualProgress");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.SessionPracticeTaskMetronome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComfortableSpeed");

                    b.Property<int>("EndSpeed");

                    b.Property<int>("StartSpeed");

                    b.HasKey("Id");

                    b.ToTable("SessionPracticeTaskMetronome");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.GoalPracticeTask", b =>
                {
                    b.HasOne("SmartSession.Domain.Records.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartSession.Domain.Records.PracticeTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartSession.Domain.Records.PracticeTask", b =>
                {
                    b.HasOne("CygSoft.SmartSession.Domain.Exercises.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("SmartSession.Domain.Records.SessionPracticeTask", b =>
                {
                    b.HasOne("SmartSession.Domain.Records.SessionPracticeTaskDuration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId");

                    b.HasOne("SmartSession.Domain.Records.SessionPracticeTaskManualProgress", "ManualProgressEstimate")
                        .WithMany()
                        .HasForeignKey("ManualProgressEstimateId");

                    b.HasOne("SmartSession.Domain.Records.SessionPracticeTaskMetronome", "Metronome")
                        .WithMany()
                        .HasForeignKey("MetronomeId");

                    b.HasOne("SmartSession.Domain.Records.PracticeTask", "PracticeTask")
                        .WithMany("TaskSessions")
                        .HasForeignKey("PracticeTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartSession.Domain.Records.Session", "Session")
                        .WithMany("SessionTasks")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
