// <auto-generated />
using CygSoft.SmartSession.EF;
using CygSoft.SmartSession.Infrastructure.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CygSoft.SmartSession.EF.Migrations
{
    [DbContext(typeof(SmartSessionContext))]
    [Migration("20181022114737_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Exercises.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("DifficultyRating");

                    b.Property<int>("PercentageCompleteCalculationType");

                    b.Property<int>("PracticalityRating");

                    b.Property<int?>("TargetMetronomeSpeed");

                    b.Property<int?>("TargetPracticeTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Goals.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Keywords.ExerciseKeyword", b =>
                {
                    b.Property<int>("ExerciseId");

                    b.Property<int>("KeywordId");

                    b.HasKey("ExerciseId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("ExerciseKeyword");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Keywords.GoalKeyword", b =>
                {
                    b.Property<int>("GoalId");

                    b.Property<int>("KeywordId");

                    b.HasKey("GoalId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("GoalKeyword");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Keywords.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Sessions.SessionExerciseActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AchievedMetronomeSpeed");

                    b.Property<int>("ComfortMetronomeSpeed");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("ExerciseId");

                    b.Property<int>("Seconds");

                    b.Property<int>("StartMetronomeSpeed");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("SessionExerciseActivity");
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Keywords.ExerciseKeyword", b =>
                {
                    b.HasOne("CygSoft.SmartSession.Domain.Exercises.Exercise", "Exercise")
                        .WithMany("ExerciseKeywords")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CygSoft.SmartSession.Domain.Keywords.Keyword", "Keyword")
                        .WithMany("KeywordExercises")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Keywords.GoalKeyword", b =>
                {
                    b.HasOne("CygSoft.SmartSession.Domain.Goals.Goal", "Goal")
                        .WithMany("GoalKeywords")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CygSoft.SmartSession.Domain.Keywords.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CygSoft.SmartSession.Domain.Sessions.SessionExerciseActivity", b =>
                {
                    b.HasOne("CygSoft.SmartSession.Domain.Exercises.Exercise")
                        .WithMany("ExerciseActivity")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
